## This workflow will build and push a web application to an Azure Static Web App when you change your code.
#
# This workflow assumes you have already created the target Azure Static Web App.
# For instructions see https://docs.microsoft.com/azure/static-web-apps/get-started-portal?tabs=vanilla-javascript
#
# To configure this workflow:
#
# 1. Set up a secret in your repository named AZURE_STATIC_WEB_APPS_API_TOKEN with the value of your Static Web Apps deployment token.
#    For instructions on obtaining the deployment token see: https://docs.microsoft.com/azure/static-web-apps/deployment-token-management
#
# 3. Change the values for the APP_LOCATION, API_LOCATION and APP_ARTIFACT_LOCATION, AZURE_STATIC_WEB_APPS_API_TOKEN environment variables (below).
#    For instructions on setting up the appropriate configuration values go to https://docs.microsoft.com/azure/static-web-apps/front-end-frameworks
name: Build the infrastructure and Deploy web app to Azure Static Web Apps

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - '**'

# Environment variables available to all jobs and steps in this workflow
env:
  AZURE_WEBAPP_NAME: bradyweatherjml    # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: './Presentation/BradyWeather.Blazor.Server'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '3.1.102'                 # set this to the .NET Core version to use
#https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs#argument-reference
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_AD_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}


jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set Credentials
      id: setcredentials
      run: |
         echo ::set-output name=az_credentials::'{ "clientId": "${{ secrets.AZURE_AD_CLIENT_ID  }}", "clientSecret": "${{ secrets.AZURE_AD_CLIENT_SECRET }}" ,  "subscriptionId": "${{ secrets.AZURE_AD_SUBSCRIPTION_ID }}", "tenantId": "${{ secrets.AZURE_AD_TENANT_ID  }}" }'

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ steps.setcredentials.outputs.az_credentials }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false



  build:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp


  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: .net-app

    - name: Set Credentials
      id: setcredentials
      run: |
         echo ::set-output name=az_credentials::'{ "clientId": "${{ secrets.AZURE_AD_CLIENT_ID  }}", "clientSecret": "${{ secrets.AZURE_AD_CLIENT_SECRET }}" ,  "subscriptionId": "${{ secrets.AZURE_AD_SUBSCRIPTION_ID }}", "tenantId": "${{ secrets.AZURE_AD_TENANT_ID  }}" }'

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ steps.setcredentials.outputs.az_credentials }}

    - name: Get Publish Profile
      run: |
        echo "::set-output name=PUBLISH_PROFILE::$(az webapp deployment list-publishing-profiles -g 'brady' -n '${{env.AZURE_WEBAPP_NAME}}' --xml)"
      id: getPublishProfile

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ steps.getPublishProfile.outputs.PUBLISH_PROFILE  }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
